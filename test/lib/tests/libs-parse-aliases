#!/bin/bash

# First arg should be our sudoadmin tool path
sudoadm=$([ "$1" != "" ] && echo "$1" || echo "../../../sudoadmin")

# First arg should be our configuration file path
config=$([ "$2" != "" ] && echo "$2" || echo "../../assets/config")

# Get our name
prog=$(basename $0)

# Get our current working directory
cwd=$(pwd)

# Retrieve the configuration file so we have some data to work with
if [ ! -f ${config} ]; then
  echo "${prog}: Could not locate configuration data for tests, exiting"
  exit 1
fi

source ${config}

# Check for 'sudoadmin'
if [ ! -f "${sudoadm}" ]; then
  sudoadm=$(find / -type f -name sudoadmin|sort -u|head -1)
fi

# Combine ${cmnd_aliases[@]}, ${host_aliases[@]} & ${user_aliases[@]} into ${object[@]}
for cmnd in ${!cmnd_aliases[@]}; do
  object+=("Cmnd_Alias ${cmnd} = ${cmnd_aliases[${cmnd}]}")
done

for host in ${!host_aliases[@]}; do
  object+=("Host_Alias ${host} = ${host_aliases[${host}]}")
done

for user in ${!user_aliases[@]}; do
  object+=("User_Alias ${user} = ${user_aliases[${user}]}")
done

# Ensure ${object} is > 0
if [ ${#object[@]} -gt 0 ]; then

  # Begin iteration of ${object[@]}
  for data in "${object[@]}"; do

    # Reset ${parsed} to ''
    parsed=

    # Run ${sudoadm} with -t option to use eval of functional test
    parsed="$(${sudoadm} -t "parse_alias \"${data}\"")"
    if [ $? -ne 0 ]; then
      echo "${prog}: An error occured loading '${sudoadm}' as set of libraries"
      exit 1
    fi

    # Remove filtering on ${parsed}
    parsed="$(${sudoadm} -t "str_rem_filter_comma \"${parsed}\"")"
    parsed="$(${sudoadm} -t "str_rem_filter_spaces \"${parsed}\"")"

    # Ensure parsing succeeded (only validates those field requried for a valid stanza)
    stanza="$(echo "${parsed}"|awk '{split($1, obj, "=");print obj[2]}')"
    account="$(echo "${parsed}"|awk '{split($2, obj, "=");print obj[2]}')"
    objects="$(echo "${parsed}"|awk '{split($3, obj, "=");print obj[2]}')"

    # Create safe ${needle} from ${object[${data}]} using str_sed_escapes()
    needle="$(${sudoadm} -t "str_sed_escapes \"${parsed}\"")"

    # Catch ${stanza} from ${needle} as ${val_stanza}
    val_stanza="$(echo "${needle}"|sed "s|^\(${stanza}\).*|\1|g")"

    # Catch ${account} from ${needle} as ${val_account}
    val_account="$(echo "${needle}"|sed "s|^\(${account}\).*|\1|g")"

    # Catch ${objects} from ${needle} as ${val_objects}
    val_objects="$(echo "${needle}"|sed "s|^\(${objects}\).*|\1|g")"

    # Validate components 
    if [[ "${stanza}" != "${val_stanza}" ]] || [[ "${account}" != "${val_account}" ]] || [[ "${objects}" != "${val_objects}" ]]; then
      echo "${prog}: Could not validate parsing of '${stanza}' stanza for '${account}'"
      echo "Parsed: ${parsed}"
      [[ "${stanza}" != "${val_stanza}" ]] && echo "Stanza didn't match (${stanza} - ${val_stanza})"
      [[ "${account}" != "${val_account}" ]] && echo "Account didn't match (${account})"
      [[ "${objects}" != "${val_objects}" ]] && echo "Objects didn't match (${objects})"
      exit 1
    fi

  done
fi

echo "Passed"