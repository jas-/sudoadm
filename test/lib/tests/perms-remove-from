#!/bin/bash

# First arg should be our sudoadm tool path
sudoadm=$([ "$1" != "" ] && echo "$1" || echo "../../../sudoadm")

# First arg should be our configuration file path
config=$([ "$2" != "" ] && echo "$2" || echo "../../assets/config")

# Get our name
prog=$(basename $0)

# Get our current working directory
cwd=$(pwd)

# Retrieve the configuration file so we have some data to work with
if [ ! -f ${config} ]; then
  echo "${prog}: Could not locate configuration data for tests, exiting"
  exit 1
fi

source ${config}

# Check for 'sudoadm'
if [ ! -f "${sudoadm}" ]; then
  sudoadm=$(find / -type f -name sudoadm|sort -u|head -1)
fi

# Check for 'sudoers'
if [ ! -f "${file}" ]; then
  file=$(find $(dirname ${config}) -type f -name sudoers|sort -u|head -1)
fi

# Parse the permission stanza
#  1 - The haystack
parse_perms() {
  local haystack="${1}"

  echo "${haystack}"|gawk '
    function ltrim(s) { sub(/^[ \t\r\n]+/, "", s); return s }
    function rtrim(s) { sub(/[ \t\r\n]+$/, "", s); return s }
    function trim(s)  { return rtrim(ltrim(s)); }
  {
    stanza="perm=" $1;

    # Initial match
    match($2, /^(\w+)=(\(.*\))?(N?O?PASSWD|N?O?EXEC|N?O?SETENV| \
      N?O?LOG_INPUT|N?O?LOG_OUTPUT)?:?(.*)$/, obj);

    # If server is missing try again
    if (!obj[1]) {
      total=split($2, tmp, "=");
      if (tmp[1])
        obj[1]=tmp[1];
    }

    # If ug is missing try again
    if (!obj[2]) {
      match($0, /^.*(\(.*\)).*$/, tmp);
      if (tmp[1]) {
        obj[2]=tmp[1];
      }
    }

    # If tag is missing try again
    if (!obj[3]) {
      match($0, /^.*(N?O?PASSWD|N?O?EXEC|N?O?SETENV|N?O?LOG_INPUT| \
        N?O?LOG_OUTPUT).*$/, tmp);
      if (tmp[1]) {
        obj[3]=tmp[1];
      }
    }

    # If cmds is missing try again
    if (!obj[4]) {

      # Try to split @ : for a list of cmds
      if ($0 ~ /:/) {
        total=split($0, tmp, ":");
        if (tmp[total])
          obj[4]=tmp[total];
      }

      # If still no cmds try splitting @ =
      if ($0 ~ /=/ && !obj[4]) {
        total=split($0, tmp, "=");
        if (tmp[total])
          obj[4]=tmp[total];
      }
    }

    # Fix for malformed cmds
    if (obj[4] ~ /\(.*\).*/) {
      total=split(obj[4], tmp, ")");
      if (tmp[total])
        obj[4]=tmp[total];
    }

    # Fix for only permissions as arg
    if (!obj[4] && obj[1]) {
      obj[4]=obj[1];
      obj[1]="";
    }

    server="server=" trim(obj[1]);
    ug="ug=" trim(obj[2]);
    tag="tag=" trim(obj[3]);
    cmds="cmds=" trim(obj[4]);

    print stanza " " server " " ug " " tag " " cmds

  }'
}

# Ensure ${permissions[@]} is > 0
if [ ${#permissions[@]} -gt 0 ]; then

  # Begin iteration of ${permissions[@]}
  for data in ${!permissions[@]}; do

    # Reset ${items}, ${item} & ${random) to empty
    items=
    item=
    random=

    # Make a temporary copy of ${file}
    name="${tmp_dir}$(basename ${file}).${data}.$RANDOM"
    cp ${file} ${name}

    # Add an alias so we can remove it
    bogus=$(${sudoadm} -Vf ${name} -aP ${data} "${permissions[${data}]}")
    if [ $? -ne 0 ]; then
      echo "Failed addition of new '${data}' Permissions"
      echo "${bogus}" && exit 1
    fi

    # Create a needle to search for
    needle="^${data}.*"

    # Use ${needle} to create ${haystack} from ${name}
    haystack=$(grep "${needle}" ${name})
    if [ "${haystack}" == "" ]; then
      echo "Failed validation of new '${data}' Permissions"
      echo "${bogus}" && exit 1
    fi

    # Sleep for .1 seconds to accomodate for race conditions
    sleep 1

    # Parse supplied permissions stanza "${data} ${permissions[${data}]}"
    tmp="$(parse_perms "${data} ${permissions[${data}]}")"

    # Split ${tmp} apart to get objects (commands component)
    obj="$(echo "${tmp}" | \
      gawk '{if (match($0, /cmds=(.*)/, obj)){print obj[1]}}')"

    # Generate an array from ${obj}
    IFS=',' read -a items <<< "$(echo "${obj}")"

    # Generate a random number for this iteration
    while [[ ${random} == "" ]] || [[ ${random} -gt ${#items[@]} ]]; do
      random=$(( $RANDOM % ${#items[@]} ))
      if [[ ${random} -lt ${#items[@]} ]] && [[ ${random} -gt -1 ]]; then

        # Randomly pick an element from ${user_aliases[${data}]} to remove
        item=$(echo "${items[${random}]}")
        if [ "${item}" != "" ]; then
          break
        fi
      fi
    done

    # Now remove the alias ${data}
    bogus=$(${sudoadm} -Vf ${name} -rP ${data} "${item}")
    if [ $? -ne 0 ]; then
      echo "Failed removal of new '${item}' from the '${data}' Permissions"
      echo "${bogus}" && exit 1
    fi

    # Use ${item} to create ${haystack} from ${name}
    haystack=$(grep "${needle}" ${name}|grep "${item}")
    if [ "${haystack}" != "" ]; then
      echo "Failed validation for remvoval of '${item}' from the \
        '${data}' Permissions"
      echo "${bogus}" && exit 1
    fi

    # Clean up our working file(s)
    rm -f ${name}*
  done
fi

echo "Passed"